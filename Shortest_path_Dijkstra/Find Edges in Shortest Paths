You are given an undirected weighted graph of n nodes numbered from 0 to n - 1. The graph consists of m edges represented by a 2D array edges, where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.

Consider all the shortest paths from node 0 to node n - 1 in the graph. You need to find a boolean array answer where answer[i] is true if the edge edges[i] is part of at least one shortest path. Otherwise, answer[i] is false.

Return the array answer.

Note that the graph may not be connected.

 

Example 1:


Solution:
1)  Find shortest distnace from 0 to all node
2) Find shortest distnace from n-1 to all node
3) how to check given node is part of shortest path or not
   u----v 
   dis(u from 0)+ dis(v from n-1)+wt(uv) == shortestdistanace (0,n-1)
   or 
    dis(v from 0)+ dis(u from n-1)+wt(uv) == shortestdistanace (0,n-1)
   then it part of shortest path

 In this i used a codition 
 if dis[u]<d
    continue;
 1---2(3)
 2----0(6)
0----1(1)

dryrun dijkstra
agar isme dis[u]<d hai mtlab humne iss pahle travserse kr liya hau
to dubara krne ke jarurt ni hai 
continue kro


class Solution {
public:
    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {
       vector<vector<vector<int>>>adj(n);
       for(auto E:edges)
       {
        int u=E[0];
        int v=E[1];
        int w=E[2];
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
       } 
       // distance from 0 to x
       vector<int>dis1(n,INT_MAX);
       // distnace from n-1 to x
       vector<int>dis2(n,INT_MAX);
       priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq1;
       priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq2;

       pq1.push({0,0});
       dis1[0]=0;
       while(!pq1.empty())
       {
          int u=pq1.top().second;
          int d=pq1.top().first;
          pq1.pop();
          if(dis1[u]<d)
          continue;
          for(auto it:adj[u])
          {
            int v=it[0];
            int w=it[1];
            if(dis1[u]!=INT_MAX &&dis1[v]>dis1[u]+w)
            {
                dis1[v]=dis1[u]+w;
                pq1.push({dis1[v],v});
            }
          }
       }
       dis2[n-1]=0;
       pq2.push({0,n-1});
         while(!pq2.empty())
       {
          int u=pq2.top().second;
          int d=pq2.top().first;
          pq2.pop();
             if(dis2[u]<d)
          continue;
          for(auto it:adj[u])
          {
            int v=it[0];
            int w=it[1];
            if(dis2[u]!=INT_MAX&&dis2[v]>dis2[u]+w)
            {
                dis2[v]=dis2[u]+w;
                pq2.push({dis2[v],v});
            }
          }
       }
int shortest_distance=dis1[n-1];
vector<bool>ans;
for(auto it:edges)
{
int u=it[0];
int v=it[1];
int w=it[2];
if((dis1[u]!=INT_MAX&&dis2[v]!=INT_MAX&&dis1[u]+dis2[v]+w==shortest_distance)|| (dis2[u]!=INT_MAX&&dis1[v]!=INT_MAX&&dis1[v]+dis2[u]+w==shortest_distance))
ans.push_back(true);
else ans.push_back(false);
}
return ans;
    }
};


